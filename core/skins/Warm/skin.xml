<?xml version="1.0"?>
<!--
	This file can be ommitted from your skin, in which case it will use
	the folder name as the skin name, and "add" as the skin type.
	Make sure to save the file as UTF-8 if you're using special characters in it.
-->
<skin>

	<!--
		Name. This will only be shown to anyone who can change a skin.
	-->

	<name>
		Warm
	</name>

	<!--
		Type. Possible values:
			- add (default, add this skin to the root style)
			- replace (discard the root style and consider this as the basic style)

		Warnings:
			- All files should have their url() paths modified accordingly. e.g., url($images) instead of url(../assets)
			- If you're offering nested skins (/skins/skin1/skin2/), skin2 can only be of the "add" type,
			  otherwise it should obviously be set directly below the top-level folder. (/skins/skin2/)
			- If you use "replace", you don't have to copy all files from the top-level skin, Wedge will automatically
			  retrieve the top-level files if any are missing from your skin. If you do import a file for further
			  modifications, though, make sure  you import all satellite files (*.something.css) into your skin as well.
	-->

	<type>
		add
	</type>

	<!--
		Parent skin.

		Wedge skins can inherit each other. Skins without a parent tag directly inherit the root skin, Weaving.
	-->

	<parent>
		Wine
	</parent>

	<!--
		Comment. This HTML text will only be shown to users when selecting
		a skin, either for the default forum theme (admins), board theme
		(board owners) and default theme override (regular users, if allowed.)

		Use the opportunity to communicate credits or details to users.
		Technical information is best posted wherever you upload the file.
	-->

	<comment><![CDATA[
		By Nao.
	]]></comment>

	<!--
		Skin options. Wedge's default theme only offers three options for skins:

		<mobile> (meaning the skin is optimized for mobile devices; default is '0')
		<sidebar> (sidebar position; default is 'right')
		<shortmenu> (whether the menu should have as few main entries as possible; default is '1')

		You should only use 0 or 1 values for skin variables (such as <mobile>), except for <sidebar>.

		Possible values for <sidebar> are 'right' and 'left'. If you want to add
		more values or even more options, you can do it by creating a new theme.
		Of course, you'll have to account for these new values in your own design.
		For instance, if you have a sidebar-like block in your default layer, try to make
		sure it's shown opposite the sidebar, or at least make sure that having both
		sidebars on the same side works.
	-->

	<options>
		<sidebar>
			right
		</sidebar>
	</options>

	<!--
		JavaScript. This section allows you to define extra JS code that should be
		added at the end of the page. As with other tags, you can specify a target
		browser using "for". You can also require some JavaScript files to be loaded,
		use the "include" keyword to specify a comma-separated list of files.
		You can specify an external HTTP URL, or a relative path based on $here,
		a variable representing the current skin folder ($here/myscript.js).

		In the examples below, we're adding support for two features on IE6:
		hovers on LI tags, and accessing (styling) buttons by their type.
	-->

	<script for="ie6" include="ie6hover.js"><![CDATA[
	$('input[type=checkbox], input[type=radio]').addClass('ie_check');
	$('input[type=submit], input[type=button]').addClass('ie_button');
	$.ie6hover();
	]]></script>

	<!--
		Raw CSS. This section allows you to define extra style rules that should be
		added at the top of the page. You should prefer the use of actual CSS
		files, unless you need to include an external file like a web font (by
		using the include parameter), or your inline styles use the "$behavior"
		keyword, which is mandatory if you want to use behavior files for IE.
	-->

	<css for="disabled"><![CDATA[
	.ie_sucks_anyway {}
	]]></css>

	<!--
		CSS files. Mostly for web fonts, really.
		Note that it isn't recommended to use web fonts on stock installs.
		Open Sans is one of the lightest ones you could find, though.
	-->

	<css include="http://fonts.googleapis.com/css?family=Open+Sans:400,400italic,700"></css>

	<!--
		Available languages: a comma-separated (or newline-separated) list of languages.
		If you use the $languages variable in your CSS, it means you're expecting to show
		a custom style depending on the language, e.g. background: url($here/icons/image-$language.png)
		would show 'image-french.png' if the user had their preferred language set to French.
		Since you can't account for all available languages, just list here all of those you did consider.

		The first in the list will be the fallback (usually English.)
		- Remove the bangs (!) to enable the feature.
		- Don't use the tag if you don't offer custom language styling, obviously, otherwise it will
		  just waste several bytes per page by adding the language name to the cached file URL.
	-->
	<!languages>
		english, french
	</!languages>

	<!--
		Replacements

		Use the replace tag to define a string to replace with another every time it is found in the HTML.
		The examples below are not actually used in Warm (they would slow it down by a few milliseconds for
		nothing), so they were disabled with a bang. Just replace !replace with replace. Do you copy?

		You can use the 'regex' parameter to play with regular expressions if you're comfortable with them.

		You may also use the <we:nested:tag> tag where you replace 'tag' with a HTML tag of your choice
		that should be recursively excluded. For instance, <li><we:nested:li></li> will match only those <li>
		tags that are NOT contained within another <li> tag. It is very useful to match the correct closer div
		for a div with a special ID or class, when you just want to add something *after* the closer div.

		!! NOTE: <we:nested> is not yet available in regex mode.
	-->
	<!replace>
		<from><div id="wedge"><we:nested:div></div></from>
		<to><div id="wedge">IT WORKED!!!! <we:nested:div> YES!!!</div></to>
	</!replace>

	<!replace regex>
		<from><aside id="sidebar">(.*?)</aside></from>
		<to><aside id="sidebar">Testing opener. $1 Testing closer.</aside></to>
	</!replace>

	<!--
		Template functions

		This allows you to override an existing template function, such as template_linktree() here.
		As usual, replace !template with template, or it won't work.
		Parameters:
			name - name of the function to replace. You may ommit the 'template_' part.
			params - parameters of the function, if needed. 99% of the time, you can skip this.
			where - position of the new replacement function.
				override: Wedge will skip the original function, and execute this one instead.
				before: Wedge will execute this function before the original function is run.
				after: Try to guess. Hmm...
	-->
	<!template name="linktree" params="$position = 'top', $force_show = false" where="before">
		echo $position;
	</!template>

</skin>
